------- FILE dino.asm LEVEL 1 PASS 2
      1  10000					       processor	6502
      2  10000 ????
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  0000 ????				      SEG
    199  0000 ????
    200  0000 ????						; EOF
------- FILE dino.asm
      4  0000 ????
      5  0000 ????						; -----------------------------------------------------------------------------
      6  0000 ????						;   CONSTANTS
      7  0000 ????						; -----------------------------------------------------------------------------
      8  0000 ????
      9  0000 ????	       00 c1	   RANDOM_MEM_0 =	$c1
     10  0000 ????	       00 e5	   RANDOM_MEM_1 =	$e5
     11  0000 ????
     12  0000 ????	       00 0d	   BKG_LIGHT_GRAY =	#13
     13  0000 ????	       00 27	   DINO_HEIGHT =	39
     14  0000 ????
     15  0000 ????						; -----------------------------------------------------------------------------
     16  0000 ????						;   MEMORY / VARIABLES
     17  0000 ????						; -----------------------------------------------------------------------------
     18 U0083 ????				      seg.u	variables
     19 U0080					      org	$80
     20 U0080
     21 U0080		       00 00	   RND_SEED   .word.w		; 2 bytes
     22 U0082		       00	   DINO_Y     .byte.b		; 3 bytes
     23 U0083
     24 U0083							; -----------------------------------------------------------------------------
     25 U0083							; ROM / CODE
     26 U0083							; -----------------------------------------------------------------------------
     27  10000 ????				       seg	code
     28  f000					      org	$f000
     29  f000
     30  f000							; -----------------------
     31  f000							; RESET
     32  f000							; -----------------------
     33  f000				   on_reset
     34  f000		       78		      sei		; SEt Interruption disable
     35  f001		       d8		      cld		; (CLear Decimal) disable BCD math
     36  f002
     37  f002							; At the start, the machine memory could be in any state, and that's good!
     38  f002							; I can use those leftovers for the random seed before doing a ZP cleaning
     39  f002		       a5 80		      lda	<RND_SEED
     40  f004		       65 c1		      adc	RANDOM_MEM_0
     41  f006		       85 80		      sta	<RND_SEED
     42  f008							;
     43  f008		       a5 00		      lda	>RND_SEED
     44  f00a		       65 e5		      adc	RANDOM_MEM_1
     45  f00c		       85 00		      sta	>RND_SEED
     46  f00e
     47  f00e							; -----------------------
     48  f00e							; CLEAR ZERO PAGE MEMORY
     49  f00e							; -----------------------
     50  f00e		       a2 00		      ldx	#0
     51  f010		       8a		      txa
     52  f011		       a8		      tay		; Y = A = X = 0
     53  f012				   __clear_mem
     54  f012		       ca		      dex
     55  f013		       9a		      txs
     56  f014		       48		      pha
     57  f015		       d0 fb		      bne	__clear_mem
     58  f017							; -----------------------
     59  f017							; INITIALIZATION
     60  f017							; -----------------------
     61  f017		       a9 50		      lda	#80
     62  f019		       85 82		      sta	DINO_Y
     63  f01b
     64  f01b							; -----------------------
     65  f01b							; FRAME
     66  f01b							; -----------------------
     67  f01b				   on_frame
     68  f01b
     69  f01b				   _vsync_and_vblank
     70  f01b							; last line of overscan
     71  f01b		       e6 80		      inc	<RND_SEED
     72  f01d		       85 02		      sta	WSYNC
     73  f01f
     74  f01f							; -----------------------
     75  f01f							; V-SYNC (3 scanlines)
     76  f01f							; -----------------------
     77  f01f				   __vsync
     78  f01f		       a9 02		      lda	#2
     79  f021		       85 00		      sta	VSYNC	; VSYNC = A (A=2) enables vsync
     80  f023		       e6 80		      inc	<RND_SEED
     81  f025		       a9 00		      lda	#0
     82  f027		       65 00		      adc	>RND_SEED
     83  f029		       85 02		      sta	WSYNC
     84  f02b		       e6 80		      inc	<RND_SEED
     85  f02d		       65 00		      adc	>RND_SEED
     86  f02f		       85 02		      sta	WSYNC
     87  f031		       e6 80		      inc	<RND_SEED
     88  f033		       65 00		      adc	>RND_SEED
     89  f035		       85 02		      sta	WSYNC
     90  f037		       85 00		      sta	VSYNC	; VSYNC = A (A=0) disables vsync
     91  f039
     92  f039							; -----------------------
     93  f039							; V-BLANK (37 scanlines)
     94  f039							; -----------------------
     95  f039							; Set the timer for the remaining VBLANK period (37 lines)
     96  f039							; 76 cpu cycles per scanline, 37 * 76 = 2812 cycles / 64 ticks => 43
     97  f039		       a9 2b		      lda	#43
     98  f03b		       8d 96 02 	      sta	TIM64T
     99  f03e
    100  f03e							; frame update logic
    101  f03e		       a9 0d		      lda	#BKG_LIGHT_GRAY
    102  f040		       85 09		      sta	COLUBK
    103  f042
    104  f042		       a9 00		      lda	#0
    105  f044				   __vblank
    106  f044		       ad 84 02 	      lda	INTIM
    107  f047		       e6 80		      inc	<RND_SEED
    108  f049		       65 00		      adc	>RND_SEED
    109  f04b		       d0 f7		      bne	__vblank
    110  f04d							; 2752 cycles + 2 from bne, 2754 (out of 2812 vblank)
    111  f04d		       85 2b		      sta	HMCLR	; Clear horizontal motion registers
    112  f04f		       85 02		      sta	WSYNC
    113  f051		       85 01		      sta	VBLANK	; Disables VBLANK (A=0)
    114  f053
    115  f053							; -----------------------------------------------------------------------------
    116  f053							; KERNEL
    117  f053							; -----------------------------------------------------------------------------
    118  f053		       a0 c0		      ldy	#192
    119  f055				   _kernel
    120  f055							;sta HMCLR	       ; 3
    121  f055							; book routine
    122  f055							; ================
    123  f055							; txa		      ; 2
    124  f055							; sec		      ; 2
    125  f055							; sbc YPos	      ; 3
    126  f055							; cmp #SpriteHeight  ; 2
    127  f055							; bcc InSprite       ; 2/3 = 11/12 cycles
    128  f055
    129  f055							; Both a BNE and sta HMOVE happen at the beginning of all but the 1st scanline
    130  f055							; thus we start each of the remaining relevant 191 scalines with 6 cycles
    131  f055							; bne _kernel	      ; 3
    132  f055							; sta HMOVE	      ; 3
    133  f055							; ================
    134  f055							; Dino sprite section
    135  f055		       38		      sec		; 2
    136  f056		       98		      tya		; 2
    137  f057		       e5 82		      sbc	DINO_Y	; 3
    138  f059		       c9 27		      cmp	#DINO_HEIGHT	; 2
    139  f05b		       b0 19		      bcs	__no_dino	; 2/3 = 11/12 cycles (total so far 17/18)
    140  f05d
    141  f05d							; Branch not taken, 17 cycles
    142  f05d							;
    143  f05d
    144  f05d
    145  f05d							; Load dino sprite data
    146  f05d		       aa		      tax		; 2
    147  f05e		       bd 00 fe 	      lda	DINO_TAIL,X	; 4
    148  f061		       85 1b		      sta	GRP0	; 3
    149  f063		       bd 26 fe 	      lda	DINO_HEAD_0,X	; 4
    150  f066		       85 1c		      sta	GRP1	; 3 (total so far 16 + 17 = 33 cycles)
    151  f068		       85 10		      sta	RESP0	; 3  38 cycles, f(38) = 10px
    152  f06a		       85 11		      sta	RESP1	; 3  41 cycles
    153  f06c
    154  f06c		       a5 10		      lda	$10	; 2  graphics for player 1 offset 1px left
    155  f06e		       85 21		      sta	HMP1	; 3  fine positioning for the dino head
    156  f070							; Formula for horizontal position in pixels
    157  f070							; f(cycles) = (cycles - 23 [HBLANK]) / 3 [TIA] + 5 [TIA HOR DELAY]
    158  f070
    159  f070		       a9 02		      lda	#2
    160  f072		       85 1d		      sta	ENAM0
    161  f074		       85 12		      sta	RESM0
    162  f076
    163  f076
    164  f076				   __no_dino		; if branch taken, 12 cycles
    165  f076		       ea		      nop
    166  f077
    167  f077
    168  f077		       a9 00		      lda	#0
    169  f079		       85 1d		      sta	ENAM0
    170  f07b
    171  f07b
    172  f07b		       88		      dey		; 2
    173  f07c		       85 02		      sta	WSYNC	; 3
    174  f07e		       85 2a		      sta	HMOVE	; 3
    175  f080		       d0 d3		      bne	_kernel	; 2/3
    176  f082
    177  f082							; -----------------------------------------------------------------------------
    178  f082
    179  f082							; -----------------------
    180  f082							; OVERSCAN (30 scanlines)
    181  f082							; -----------------------
    182  f082							; 30 lines of OVERSCAN, 30 * 76 / 64 = 35
    183  f082		       a9 23		      lda	#35
    184  f084		       8d 96 02 	      sta	TIM64T
    185  f087		       a9 02		      lda	#2
    186  f089		       85 01		      sta	VBLANK
    187  f08b		       a9 00		      lda	#0
    188  f08d				   __overscan
    189  f08d		       ad 84 02 	      lda	INTIM
    190  f090		       e6 80		      inc	<RND_SEED
    191  f092		       65 00		      adc	>RND_SEED
    192  f094		       d0 f7		      bne	__overscan
    193  f096
    194  f096							; We're on the final OVERSCAN line and 40 cpu cycles remain,
    195  f096							; do the jump now to consume some cycles and a WSYNC at the
    196  f096							; beginning of the next frame to consume the rest
    197  f096		       4c 1b f0 	      jmp	on_frame
    198  f099
    199  f099
    200  f099							; -----------------------------------------------------------------------------
    201  f099							; SPRITE GRAPHICS DATA
    202  f099							; -----------------------------------------------------------------------------
    203  fe00					      org	$fe00
    204  fe00
    205  fe00							; -----------------------------------------------
    206  fe00							; Graphics Data from PlayerPal 2600
    207  fe00							; https://alienbill.com/2600/playerpalnext.html
    208  fe00							; -----------------------------------------------
    209  fe00
    210  fe00				   DINO_TAIL
    211  fe00		       00		      .byte.b	#%00000000
    212  fe01		       00		      .byte.b	#%00000000
    213  fe02		       18		      .byte.b	#%00011000
    214  fe03		       18		      .byte.b	#%00011000
    215  fe04		       10		      .byte.b	#%00010000
    216  fe05		       10		      .byte.b	#%00010000
    217  fe06		       18		      .byte.b	#%00011000
    218  fe07		       18		      .byte.b	#%00011000
    219  fe08		       1d		      .byte.b	#%00011101
    220  fe09		       1d		      .byte.b	#%00011101
    221  fe0a		       3f		      .byte.b	#%00111111
    222  fe0b		       3f		      .byte.b	#%00111111
    223  fe0c		       7f		      .byte.b	#%01111111
    224  fe0d		       7f		      .byte.b	#%01111111
    225  fe0e		       ff		      .byte.b	#%11111111
    226  fe0f		       ff		      .byte.b	#%11111111
    227  fe10		       ff		      .byte.b	#%11111111
    228  fe11		       ff		      .byte.b	#%11111111
    229  fe12		       cf		      .byte.b	#%11001111
    230  fe13		       cf		      .byte.b	#%11001111
    231  fe14		       87		      .byte.b	#%10000111
    232  fe15		       87		      .byte.b	#%10000111
    233  fe16		       83		      .byte.b	#%10000011
    234  fe17		       83		      .byte.b	#%10000011
    235  fe18		       01		      .byte.b	#%00000001
    236  fe19		       01		      .byte.b	#%00000001
    237  fe1a		       01		      .byte.b	#%00000001
    238  fe1b		       01		      .byte.b	#%00000001
    239  fe1c		       01		      .byte.b	#%00000001
    240  fe1d		       01		      .byte.b	#%00000001
    241  fe1e		       01		      .byte.b	#%00000001
    242  fe1f		       01		      .byte.b	#%00000001
    243  fe20		       01		      .byte.b	#%00000001
    244  fe21		       01		      .byte.b	#%00000001
    245  fe22		       01		      .byte.b	#%00000001
    246  fe23		       01		      .byte.b	#%00000001
    247  fe24		       00		      .byte.b	#%00000000
    248  fe25		       00		      .byte.b	#%00000000
    249  fe26
    250  fe26				   DINO_HEAD_0
    251  fe26		       00		      .byte.b	#%00000000
    252  fe27		       00		      .byte.b	#%00000000
    253  fe28		       c0		      .byte.b	#%11000000
    254  fe29		       c0		      .byte.b	#%11000000
    255  fe2a		       80		      .byte.b	#%10000000
    256  fe2b		       80		      .byte.b	#%10000000
    257  fe2c		       80		      .byte.b	#%10000000
    258  fe2d		       80		      .byte.b	#%10000000
    259  fe2e		       80		      .byte.b	#%10000000
    260  fe2f		       80		      .byte.b	#%10000000
    261  fe30		       c0		      .byte.b	#%11000000
    262  fe31		       c0		      .byte.b	#%11000000
    263  fe32		       c0		      .byte.b	#%11000000
    264  fe33		       c0		      .byte.b	#%11000000
    265  fe34		       e0		      .byte.b	#%11100000
    266  fe35		       e0		      .byte.b	#%11100000
    267  fe36		       e8		      .byte.b	#%11101000
    268  fe37		       e8		      .byte.b	#%11101000
    269  fe38		       f8		      .byte.b	#%11111000
    270  fe39		       f8		      .byte.b	#%11111000
    271  fe3a		       e0		      .byte.b	#%11100000
    272  fe3b		       e0		      .byte.b	#%11100000
    273  fe3c		       e0		      .byte.b	#%11100000
    274  fe3d		       e0		      .byte.b	#%11100000
    275  fe3e		       fc		      .byte.b	#%11111100
    276  fe3f		       fc		      .byte.b	#%11111100
    277  fe40		       f0		      .byte.b	#%11110000
    278  fe41		       f0		      .byte.b	#%11110000
    279  fe42		       ff		      .byte.b	#%11111111
    280  fe43		       ff		      .byte.b	#%11111111
    281  fe44		       ff		      .byte.b	#%11111111
    282  fe45		       ff		      .byte.b	#%11111111
    283  fe46		       ff		      .byte.b	#%11111111
    284  fe47		       ff		      .byte.b	#%11111111
    285  fe48		       bf		      .byte.b	#%10111111
    286  fe49		       bf		      .byte.b	#%10111111
    287  fe4a		       fe		      .byte.b	#%11111110
    288  fe4b		       fe		      .byte.b	#%11111110
    289  fe4c
    290  fe4c							; -----------------------------------------------------------------------------
    291  fe4c							; ROM SETUP
    292  fe4c							; -----------------------------------------------------------------------------
    293  fffc					      org	$fffc
    294  fffc		       00 f0		      .word.w	on_reset	; reset button signal
    295  fffe		       00 f0		      .word.w	on_reset	; IRQ
    296  10000
